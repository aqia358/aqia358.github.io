<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Aqia358's Blog]]></title>
  <link href="http://aqia358.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://aqia358.github.io/"/>
  <updated>2016-07-08T13:25:52+08:00</updated>
  <id>http://aqia358.github.io/</id>
  <author>
    <name><![CDATA[HongLiang Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python virtualenv]]></title>
    <link href="http://aqia358.github.io/blog/2016/07/08/python-virtualenv/"/>
    <updated>2016-07-08T13:24:00+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/07/08/python-virtualenv</id>
    <content type="html"><![CDATA[<h2>Virtualenv</h2>

<p>virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够：  <br/>
1. 在没有权限的情况下安装新套件
2. 不同应用可以使用不同的套件版本
3. 套件升级不影响其他应用</p>

<h3>安装</h3>

<pre><code>sudo apt-get install python-virtualenv
or
mkdir -p $HOME/.local/lib/python2.7/site-packages
easy_install  --prefix=~/.local   virtualenv
echo "PYTHONPATH=$HOME/.local/lib/python2.6/site-packages" &gt;&gt; .bashrc 
echo "export PATH=$HOME/.local/bin:$PATH" &gt;&gt; .bashrc 
source .bashrc 
</code></pre>

<h3>使用方法</h3>

<p>virtualenv [虚拟环境名称]
如，创建<strong>ENV</strong>的虚拟环境
virtualenv ENV
默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 &ndash;no-site-packages建立虚拟环境
virtualenv &ndash;no-site-packages [虚拟环境名称]</p>

<h4>启动虚拟环境</h4>

<p>cd ENV source ./bin/activate
注意此时命令行会多一个(ENV)，ENV为虚拟环境名称，接下来所有模块都只会安装到该目录中去。</p>

<h4>退出虚拟环境</h4>

<p>deactivate</p>

<h4>在虚拟环境安装Python套件</h4>

<p>Virtualenv 附带有pip安装工具，因此需要安装的套件可以直接运行：
pip install [套件名称]
如果没有启动虚拟环境，系统也安装了pip工具，那么套件将被安装在系统环境中，为了避免发生此事，可以在~/.bashrc文件中加上：
export PIP_REQUIRE_VIRTUALENV=true
或者让在执行pip的时候让系统自动开启虚拟环境：
export PIP_RESPECT_VIRTUALENV=true</p>

<h2>Virtualenvwrapper</h2>

<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：
1. 将所有虚拟环境整合在一个目录下
2. 管理（新增，删除，复制）虚拟环境
3. 切换虚拟环境
4. &hellip;</p>

<h4>安装</h4>

<p>sudo easy_install virtualenvwrapper<br/>
此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，先别急，打开这个文件看看,里面有安装步骤，我们照着操作把环境设置好。
创建目录用来存放虚拟环境
mkdir $HOME/.virtualenvs
在~/.bashrc中添加行： export WORKON_HOME=$HOME/.virtualenvs
在~/.bashrc中添加行：source /usr/local/bin/virtualenvwrapper.sh
运行： source ~/.bashrc
此时virtualenvwrapper就可以使用了。
2. lsvirtualenv 列出虚拟环境列表
3. mkvirtualenv [虚拟环境名称] 新建虚拟环境
4. workon [虚拟环境名称] 启动/切换虚拟环境
5. rmvirtualenv [虚拟环境名称] 删除虚拟环境
6. deactivate 离开虚拟环境</p>
]]></content>
  </entry>
  
</feed>

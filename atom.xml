<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Aqia358's Blog]]></title>
  <link href="http://aqia358.github.io/atom.xml" rel="self"/>
  <link href="http://aqia358.github.io/"/>
  <updated>2016-07-13T12:08:40+08:00</updated>
  <id>http://aqia358.github.io/</id>
  <author>
    <name><![CDATA[HongLiang Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hadoop-client 2.4 dep download]]></title>
    <link href="http://aqia358.github.io/blog/2016/07/13/hadoop-client-2-dot-4-dep-download/"/>
    <updated>2016-07-13T12:07:28+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/07/13/hadoop-client-2-dot-4-dep-download</id>
    <content type="html"><![CDATA[<p>﻿### hadoop-client 2.4 及其依赖包下载 ###
新建maven工程引入pom.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
</span><span class='line'>  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
</span><span class='line'>
</span><span class='line'>  &lt;groupId&gt;com.mycompany.helloworld&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;helloworld&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
</span><span class='line'>  &lt;packaging&gt;jar&lt;/packaging&gt;
</span><span class='line'>
</span><span class='line'>  &lt;name&gt;helloworld&lt;/name&gt;
</span><span class='line'>  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
</span><span class='line'>
</span><span class='line'>  &lt;properties&gt;
</span><span class='line'>    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
</span><span class='line'>  &lt;/properties&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependencies&gt;
</span><span class='line'>&lt;dependency&gt;
</span><span class='line'>  &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;2.4.0&lt;/version&gt;
</span><span class='line'>&lt;/dependency&gt;
</span><span class='line'>  &lt;/dependencies&gt;
</span><span class='line'>  &lt;build&gt;
</span><span class='line'>    &lt;plugins&gt;
</span><span class='line'>      &lt;plugin&gt;
</span><span class='line'>        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
</span><span class='line'>        &lt;version&gt;2.10&lt;/version&gt;
</span><span class='line'>        &lt;executions&gt;
</span><span class='line'>          &lt;execution&gt;
</span><span class='line'>            &lt;id&gt;copy-dependencies&lt;/id&gt;
</span><span class='line'>            &lt;phase&gt;package&lt;/phase&gt;
</span><span class='line'>            &lt;goals&gt;
</span><span class='line'>              &lt;goal&gt;copy-dependencies&lt;/goal&gt;
</span><span class='line'>            &lt;/goals&gt;
</span><span class='line'>            &lt;configuration&gt;
</span><span class='line'>              &lt;outputDirectory&gt;${project.build.directory}/alternateLocation&lt;/outputDirectory&gt;
</span><span class='line'>              &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt;
</span><span class='line'>              &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt;
</span><span class='line'>              &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt;
</span><span class='line'>            &lt;/configuration&gt;
</span><span class='line'>          &lt;/execution&gt;
</span><span class='line'>        &lt;/executions&gt;
</span><span class='line'>      &lt;/plugin&gt;
</span><span class='line'>    &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;
</span><span class='line'>
</span><span class='line'>&lt;/project&gt;</span></code></pre></td></tr></table></div></figure>


<p>mvn dependency:copy-dependencies
下载的jar包保存在：target/dependency 下</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python virtualenv]]></title>
    <link href="http://aqia358.github.io/blog/2016/07/08/python-virtualenv/"/>
    <updated>2016-07-08T13:24:00+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/07/08/python-virtualenv</id>
    <content type="html"><![CDATA[<h2>Virtualenv</h2>

<p>virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够：  <br/>
1. 在没有权限的情况下安装新套件
2. 不同应用可以使用不同的套件版本
3. 套件升级不影响其他应用</p>

<h3>安装</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-virtualenv
</span><span class='line'>or
</span><span class='line'>mkdir -p $HOME/.local/lib/python2.7/site-packages
</span><span class='line'>easy_install  --prefix=~/.local   virtualenv
</span><span class='line'>echo "PYTHONPATH=$HOME/.local/lib/python2.6/site-packages" &gt;&gt; .bashrc 
</span><span class='line'>echo "export PATH=$HOME/.local/bin:$PATH" &gt;&gt; .bashrc 
</span><span class='line'>source .bashrc </span></code></pre></td></tr></table></div></figure>


<h3>使用方法</h3>

<p>virtualenv [虚拟环境名称]
如，创建<strong>ENV</strong>的虚拟环境
virtualenv ENV
默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 &ndash;no-site-packages建立虚拟环境
virtualenv &ndash;no-site-packages [虚拟环境名称]</p>

<h4>启动虚拟环境</h4>

<p>cd ENV source ./bin/activate
注意此时命令行会多一个(ENV)，ENV为虚拟环境名称，接下来所有模块都只会安装到该目录中去。</p>

<h4>退出虚拟环境</h4>

<p>deactivate</p>

<h4>在虚拟环境安装Python套件</h4>

<p>Virtualenv 附带有pip安装工具，因此需要安装的套件可以直接运行：
pip install [套件名称]
如果没有启动虚拟环境，系统也安装了pip工具，那么套件将被安装在系统环境中，为了避免发生此事，可以在~/.bashrc文件中加上：
export PIP_REQUIRE_VIRTUALENV=true
或者让在执行pip的时候让系统自动开启虚拟环境：
export PIP_RESPECT_VIRTUALENV=true</p>

<h2>Virtualenvwrapper</h2>

<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：
1. 将所有虚拟环境整合在一个目录下
2. 管理（新增，删除，复制）虚拟环境
3. 切换虚拟环境
4. &hellip;</p>

<h4>安装</h4>

<p>sudo easy_install virtualenvwrapper<br/>
此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，先别急，打开这个文件看看,里面有安装步骤，我们照着操作把环境设置好。
创建目录用来存放虚拟环境
mkdir $HOME/.virtualenvs
在~/.bashrc中添加行： export WORKON_HOME=$HOME/.virtualenvs
在~/.bashrc中添加行：source /usr/local/bin/virtualenvwrapper.sh
运行： source ~/.bashrc
此时virtualenvwrapper就可以使用了。
2. lsvirtualenv 列出虚拟环境列表
3. mkvirtualenv [虚拟环境名称] 新建虚拟环境
4. workon [虚拟环境名称] 启动/切换虚拟环境
5. rmvirtualenv [虚拟环境名称] 删除虚拟环境
6. deactivate 离开虚拟环境</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scala 操作 hdfs]]></title>
    <link href="http://aqia358.github.io/blog/2016/07/01/scala-cao-zuo-hdfs/"/>
    <updated>2016-07-01T15:14:37+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/07/01/scala-cao-zuo-hdfs</id>
    <content type="html"><![CDATA[<h3>scala 操作HDFS</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.apache.hadoop.conf.Configuration
</span><span class='line'>import org.apache.hadoop.fs.{FileSystem, Path}
</span><span class='line'> 
</span><span class='line'>
</span><span class='line'>object Hdfs extends App{
</span><span class='line'> 
</span><span class='line'>  def write(uri: String, filePath: String, data: Array[Byte]) = {
</span><span class='line'>    System.setProperty("HADOOP_USER_NAME", "ead")
</span><span class='line'>    val conf = new Configuration()
</span><span class='line'>    conf.set("fs.defaultFS", uri)
</span><span class='line'>    val fs = FileSystem.get(conf)
</span><span class='line'>    val path = new Path(filePath)
</span><span class='line'>    val os = fs.create(path)
</span><span class='line'>    os.write(data)
</span><span class='line'>    fs.close()
</span><span class='line'>  }
</span><span class='line'> 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>usage</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hdfs.write("hdfs://host:8000", "{hdfs_path}", "hello".getBytes())</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sbt 常用命令]]></title>
    <link href="http://aqia358.github.io/blog/2016/06/30/sbt-chang-yong-ming-ling/"/>
    <updated>2016-06-30T09:19:27+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/06/30/sbt-chang-yong-ming-ling</id>
    <content type="html"><![CDATA[<h2>sbt 命令</h2>

<h4>常用命令</h4>

<ol>
<li>actions - 显示当前工程可用的命令</li>
<li>update - 下载依赖</li>
<li>compile - 编译代码</li>
<li>test - 运行测试代码</li>
<li>package - 创建一个可以发布的jar包</li>
<li>publish-local - 把构建出来的jar包包装到本地的ivy缓存</li>
<li>publish - 把jar包发布到远程仓库</li>
<li>run - 执行</li>
</ol>


<h4>更多命令</h4>

<ol>
<li>test-failed - 运行失败的spec</li>
<li>test-quick - 运行所有失败的以及/或者是由依赖更新的spec</li>
<li>clean-cache - 清除所有的sbt缓存，类似于sbt的clean命令</li>
<li>clean-lib - 删除lib_managed下的所有内容</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Druid Graphite Emitter 监控]]></title>
    <link href="http://aqia358.github.io/blog/2016/06/12/druid-graphite-emitter-jian-kong/"/>
    <updated>2016-06-12T14:02:28+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/06/12/druid-graphite-emitter-jian-kong</id>
    <content type="html"><![CDATA[<h2>Druid Graphite  Emitter 监控</h2>

<p>　Graphite Emitter是druid 社区贡献的插件，需要自己打包。graphite-emitter通过graphite pickled协议将druid的监控信息发送到 graphite上。这里需要注意在配置的时候不要设置错端口，graphite pickled的端口默认是2004</p>

<h2>打包Graphite-emitter插件</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:druid-io/druid.git
</span><span class='line'>cd druid
</span><span class='line'>git checkout druid-0.9.0
</span><span class='line'>cd extensions-contrib/graphite-emitter
</span><span class='line'>mvn package -DskipTests
</span><span class='line'>生成graphite-emitter-0.9.0.jar</span></code></pre></td></tr></table></div></figure>


<p>　在druid插件安装目录下(extensions下)新建graphite-emitter目录，将上一步生成的graphite-emitter-0.9.0.jar 拷贝到graphite-emitter目录下面。同时需要metrics-core-3.1.2.jar  metrics-graphite-3.1.2.jar这两个jar包也拷贝到该目录下，druid lib下没有这两个包。需要自行添加。否则运行时会报classNotFound。</p>

<h2>配置Grphite-emitter插件</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>druid.extensions.loadList=[...,,"graphite-emitter"]
</span><span class='line'>
</span><span class='line'>druid.monitoring.monitors=["com.metamx.metrics.JvmMonitor"]
</span><span class='line'>druid.emitter=composing
</span><span class='line'>druid.emitter.composing.emitters=["logging","graphite"]
</span><span class='line'>druid.emitter.graphite.hostname=hs021
</span><span class='line'>druid.emitter.graphite.port=2004
</span><span class='line'>druid.emitter.graphite.eventConverter={"type":"whiteList", "namespacePrefix": "druid.white-test", "ignoreHostname":true, "ignoreServiceName":false, "mapPath":"conf/druid/_common/whiteList"}
</span><span class='line'>druid.emitter.logging.logLevel=info</span></code></pre></td></tr></table></div></figure>


<p>上面使用composing把日志同时输出到logging,graphite。druid.emitter.graphite.eventConverter使用自定义的whitelist通过 mapPath属性配置白名单的路径，最好用绝对路径。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{    
</span><span class='line'>    "ingest/events/thrownAway": ["dataSource"],    
</span><span class='line'>    "ingest/events/unparseable": ["dataSource"],    
</span><span class='line'>    "ingest/events/processed": ["dataSource"],    
</span><span class='line'>    "ingest/handoff/failed": ["dataSource"],    
</span><span class='line'>    "ingest/persists": [],   
</span><span class='line'>    "ingest/rows/output": [],    
</span><span class='line'>    "jvm/gc": [],    
</span><span class='line'>    "jvm/mem": [],    
</span><span class='line'>    "query/cpu/time": [       
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"    
</span><span class='line'>    ],    
</span><span class='line'>    "query/node/time": [        
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"    
</span><span class='line'>    ],    
</span><span class='line'>    "query/node/ttfb": [        
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"    
</span><span class='line'>    ],    
</span><span class='line'>    "query/partial/time": [        
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"   
</span><span class='line'>    ],    
</span><span class='line'>    "query/segment/time": [        
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"    
</span><span class='line'>    ],    
</span><span class='line'>    "query/segmentAndCache/time": [        
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"    
</span><span class='line'>    ],    
</span><span class='line'>    "query/time": [        
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"    
</span><span class='line'>    ],    
</span><span class='line'>    "query/wait/time": [        
</span><span class='line'>        "dataSource",        
</span><span class='line'>        "type"    
</span><span class='line'>    ],    
</span><span class='line'>    "segment/count": [],    
</span><span class='line'>    "segment/dropQueue/count": [],    
</span><span class='line'>    "segment/loadQueue/count": [],    
</span><span class='line'>    "segment/loadQueue/failed": [],    
</span><span class='line'>    "segment/loadQueue/size": [],    
</span><span class='line'>    "segment/scan/pending": [],    
</span><span class='line'>    "segment/size": [],    
</span><span class='line'>    "segment/usedPercent": [] 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Reference</h4>

<p><a href="http://blog.leanote.com/post/du00/Druid%E7%9A%84Graphite%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE">http://blog.leanote.com/post/du00/Druid%E7%9A%84Graphite%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql自增主键不连续导致的storm重复消费问题]]></title>
    <link href="http://aqia358.github.io/blog/2016/06/08/mysqlzi-zeng-zhu-jian-bu-lian-xu-dao-zhi-de-stormzhong-fu-xiao-fei-wen-ti/"/>
    <updated>2016-06-08T08:52:35+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/06/08/mysqlzi-zeng-zhu-jian-bu-lian-xu-dao-zhi-de-stormzhong-fu-xiao-fei-wen-ti</id>
    <content type="html"><![CDATA[<p>storm TransactionalSpout使用mysql作为数据源，数据实时的插入到mysql 数据表中，表中的id字段为自增。spout每次从当前id读取id+a个的数据，next batch的起点为id+a.
当用两个进程去写mysql时，会发现有数据被消费了多次。
这是由于mysql自增主键不连续导致的，mysql 5.1.22后默认主键的自增策略为innodb_autoinc_lock_mode=1,这种模式下每次会“预申请”多余的id(handler.cc:compute_next_insert_id)。这个预留的策略是“不够时多申请几个”， 实际执行中是分步申请。至于申请几个，是由当时“已经插入了几条数据N”决定的。当auto_increment_offset＝1时，预申请的个数是 N-1。
这样做的好处是：一次性分配足够的auto_increment id，只会将整个分配的过程锁住。但却可能会导致自增id的不连续。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fast_markdown]]></title>
    <link href="http://aqia358.github.io/blog/2016/06/03/fast-markdown/"/>
    <updated>2016-06-03T10:26:12+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/06/03/fast-markdown</id>
    <content type="html"><![CDATA[<h1>Markdown和Haroopad介绍文档</h1>

<p>[TOC &ldquo;float:right&rdquo;]</p>

<h2>什么是Markdown</h2>

<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。简而言之的说，它可以通过类似HTML的标记语法，使普通文本内容具有一定的格式。</p>

<h3>Markdown有哪些优点</h3>

<ul>
<li>纯文本实现，使用任何文本编辑器均可编辑，全平台通用。</li>
<li>排版清晰简洁，可读性较高，使用扩展可以获得更多语法格式支持，漂亮美观。</li>
<li>语法简洁，上手较快，任何人均可在短时间内学会。即使不会语法的读者，也可以读懂其原始文件的内容。</li>
<li>丰富的工具链支持：

<ul>
<li>编辑器：各种支持所见即所得的编辑器，如本文介绍的Haroopad。</li>
<li>平台支持：各大博客系统、Wiki系统均有相关插件，代码托管平台Github也支持使用Markdown来编写Readme文件。</li>
<li>和其他格式进行转化：可以方便的转化为HTML文件等。</li>
</ul>
</li>
</ul>


<h3>Markdown的基本语法</h3>

<p>Markdown的基本语法非常简单，本文即用Markdown完成。</p>

<h4>标题</h4>

<p>可以在标题内容前输入特定数量的井号(&lsquo;#&rsquo;)来实现对应级别的HTML样式的标题(HTML提供六级标题)。例如：
    # 一级标题
    #### 四级标题
一级和二级标题还有一种写法：
    一级标题
    ===================
    二级标题
    &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<h4>特殊格式字体</h4>

<p>在需要改变的文字片段前后 使用一对符号可以改变文字为特殊格式：
* 粗体     使用<code>**文字**</code>或者<code>__文字__</code>    效果：<strong>这里请大家尤其注意！</strong>
* 斜体    使用<code>*文字*</code>或者<code>_文字_</code>    效果：会不调用父类的 <em>析构函数</em> 呢？
* 高亮    使用<code>==文字==</code>    效果：==这里是高亮的重点==，但这里不是。
* 下划线    使用<code>++文字++</code>    效果：如果此时的++判断结果为真++……
* 删除线    使用<code>~~文字~~</code>    效果：<del>1.2的版本已经修复这个Bug？</del>
* 上角标    使用<code>^文字^</code>    效果：单位圆的方程式是x<sup>2</sup>^+y<sup>2</sup>^=1。
* 下角标    使用<code>~文字~</code>    效果：最常见的氧化反应是C+O~2~=CO~2~</p>

<h4>外部内容嵌入</h4>

<ul>
<li>图像 使用<code>![text](url)</code>来贴入图片 效果：
<img src="http://www.walkcd.com/favicon.ico" alt="Favicon" /></li>
<li>链接 使用<code>[linkText](url)</code>来插入链接 效果：
<a href="http://www.walkcd.com">博客首页</a></li>
<li>电子邮件 使用<code>&lt;邮件地址&gt;</code>来插入邮件地址 效果：<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x63;&#100;&#115;&#97;&#x6d;&#x61;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#99;&#100;&#x73;&#97;&#x6d;&#x61;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></li>
</ul>


<h4>列表</h4>

<h5>无序列表</h5>

<p>使用如下格式(*+-可以任意替换):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* 第一章
</span><span class='line'>* 第二章
</span><span class='line'>    + 第一条
</span><span class='line'>    + 第二条
</span><span class='line'>        - 第一则</span></code></pre></td></tr></table></div></figure>


<p>效果：
* 第一章
* 第二章
    * 第一条
    * 第二条
        * 第一则</p>

<h5>有序列表</h5>

<p>使用如下格式(即为效果)：
1. 内容
2. 内容
3. 内容</p>

<h4>表格</h4>

<p>简单表格如下，分号的位置表示对齐方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|这里是列名一|列二|三|
</span><span class='line'>|:-|:-:|-:|
</span><span class='line'>|这列是左对齐|这列是居中对齐|这列是右对齐|
</span><span class='line'>|左对齐|居中对齐|右对齐|</span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<table>
<thead>
<tr>
<th style="text-align:left;">这里是列名一</th>
<th style="text-align:center;">列二</th>
<th style="text-align:right;">三</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">这列是左对齐</td>
<td style="text-align:center;">这列是居中对齐</td>
<td style="text-align:right;">这列是右对齐</td>
</tr>
<tr>
<td style="text-align:left;">左对齐</td>
<td style="text-align:center;">居中对齐</td>
<td style="text-align:right;">右对齐</td>
</tr>
<tr>
<td style="text-align:left;">1</td>
<td style="text-align:center;">2</td>
<td style="text-align:right;">3</td>
</tr>
</tbody>
</table>


<h4>分割线</h4>

<p>以下三个连续符号构成一个分割线，分别是三种不同的分割线：
<code>***</code>
<code>---</code>
<code>___</code>
效果：</p>

<hr />

<hr />

<hr />

<h4>换行、空格和标记符号</h4>

<p>在浏览器中一般情况下，Markdown会删除所有换行和空格，打乱原有的缩进和排版。通过回车和至少两个空格可以强制换行。
要打出连续空格可以用输入法输入全角中文空格或者：
半字大的空白<code> </code>或<code> </code>
全字大的空白<code> </code>或<code> </code>
不断行的空白格<code>&amp;nbsp;</code>或<code>&amp;nbsp;</code>
若要输出符号原本的意思可以加斜线\来输出 例如：
* 不是列表</p>

<h4>引用</h4>

<p>使用右尖括号即可插入一段引用，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 这里是一段引用
</span><span class='line'>&gt;&gt; 书是人类进步的阶梯。 --高尔基
</span><span class='line'>&gt;
</span><span class='line'>&gt; 退出二级引用</span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<blockquote><p>这里是一段引用</p>

<blockquote><p>书是人类进步的阶梯。 &ndash;高尔基</p></blockquote>

<p>退出二级引用</p></blockquote>

<h4>代码</h4>

<p>使用一对反引号即可包含一个行内代码使用一对三个反引号可以包括多行代码，另外多行Tab也可以用于代码段，例如：
<code>code</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>code blocks</span></code></pre></td></tr></table></div></figure>


<p>效果：<code>print("hello");</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;iostream&gt;
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    std::cout&lt;&lt;"hello world!""&lt;&lt;std::endl;
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Haroopad介绍</h2>

<p>Haroopad是一个韩国人写的Markdown编辑器，项目主页是：
<a href="http://pad.haroopress.com/">Haroopad - The Next Document processor based on Markdown</a></p>

<h3>Haroopad的优点和缺点</h3>

<p>优点：
* 跨Windows、Mac、Linux三大平台。
* 支持实时渲染，可以在编写的时候实时查看效果。
* 支持复制、导出到HTML。
* 支持多种编程语言语法高亮。
* 支持绘制各种流程时序图等非标准Markdown格式。</p>

<p>缺点：
* 暂时不支持导出到PDF等格式</p>

<h3>Haroopad支持的额外语法</h3>

<h4>目录</h4>

<p>单行插入[toc]或[TOC]即可生成目录</p>

<h4>脚注</h4>

<p>使用<code>[^id]</code> <code>[^id]:text</code>即可生成一对脚注 <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h4>代码语法高亮</h4>

<p>在<code>``后加入编程语言名称
例如````python</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requires_authorization</span>
</span><span class='line'><span class="k">def</span> <span class="nf">somefunc</span><span class="p">(</span><span class="n">param1</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">param2</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;A docstring&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">param1</span> <span class="o">&gt;</span> <span class="n">param2</span><span class="p">:</span> <span class="c"># interesting</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Greater&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">param2</span> <span class="o">-</span> <span class="n">param1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="bp">None</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;interpreter</span>
</span><span class='line'><span class="s">... prompt&#39;&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>计划任务列表</h4>

<p>使用<code>- [ ] task name</code> <code>- [x] finished task</code>来创建计划任务。
效果：
- [x] 任务1
- [x] 任务2</p>

<h4>图像绘制</h4>

<p>图像绘制使用了mermaid引擎(<a href="https://github.com/knsv/mermaid">访问该项目地址</a>)。
目前支持流程图和时序图，可以在该项目Wiki上查看更多用法，以下列举两个最基本的例子。
流程图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">graph</span> <span class="no">TD</span>
</span><span class='line'>         <span class="n">subgraph</span> <span class="err">子图</span>
</span><span class='line'>         <span class="n">a1</span><span class="o">[</span><span class="err">矩形</span><span class="o">]</span>
</span><span class='line'>         <span class="n">a2</span><span class="o">&gt;</span><span class="err">旗帜形</span><span class="o">]</span>
</span><span class='line'>         <span class="n">a3</span><span class="p">(</span><span class="err">圆角方形</span><span class="p">)</span>
</span><span class='line'>         <span class="k">end</span>
</span><span class='line'>         <span class="n">subgraph</span> <span class="err">第二个子图</span>
</span><span class='line'>         <span class="n">b1</span><span class="p">((</span><span class="err">圆形</span><span class="p">))</span>
</span><span class='line'>         <span class="n">b2</span><span class="p">{</span><span class="err">斜方形</span><span class="p">}</span>
</span><span class='line'>         <span class="k">end</span>
</span><span class='line'>         <span class="n">a1</span><span class="o">--&gt;|</span><span class="err">实线箭头</span><span class="o">|</span><span class="n">a2</span>
</span><span class='line'>         <span class="n">a2</span><span class="o">--&gt;</span><span class="n">a1</span>
</span><span class='line'>         <span class="n">a2</span><span class="o">-.</span><span class="n">-</span><span class="o">&gt;|</span><span class="err">虚线箭头</span><span class="o">|</span><span class="n">a3</span>
</span><span class='line'>         <span class="n">a3</span><span class="o">-.</span><span class="n">-</span><span class="o">&gt;</span><span class="n">a2</span>
</span><span class='line'>         <span class="n">a3</span><span class="o">==&gt;|</span><span class="err">加粗箭头</span><span class="o">|</span><span class="n">a1</span>
</span><span class='line'>         <span class="n">a1</span><span class="o">==&gt;</span><span class="n">a3</span>
</span><span class='line'>         <span class="n">b1</span><span class="o">---</span><span class="n">b2</span>
</span><span class='line'>         <span class="n">b2</span><span class="o">---|</span><span class="err">实线无箭头</span><span class="o">|</span><span class="n">b1</span>
</span><span class='line'>         <span class="n">a1</span><span class="o">--&gt;</span><span class="n">b1</span>
</span></code></pre></td></tr></table></div></figure>


<p>时序图：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sequenceDiagram</span>
</span><span class='line'>        <span class="no">Alice</span><span class="o">-&gt;&gt;</span><span class="ss">Bob</span><span class="p">:</span> <span class="no">Hello</span> <span class="no">Bob</span><span class="p">,</span> <span class="n">how</span> <span class="n">are</span> <span class="n">you?</span>
</span><span class='line'>        <span class="n">alt</span> <span class="n">is</span> <span class="n">sick</span>
</span><span class='line'>            <span class="no">Bob</span><span class="o">-&gt;&gt;</span><span class="ss">Alice</span><span class="p">:</span> <span class="no">Not</span> <span class="n">so</span> <span class="n">good</span> <span class="p">:(</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">is</span> <span class="n">well</span>
</span><span class='line'>            <span class="no">Bob</span><span class="o">-&gt;&gt;</span><span class="ss">Alice</span><span class="p">:</span> <span class="no">Feeling</span> <span class="n">fresh</span> <span class="n">like</span> <span class="n">a</span> <span class="n">daisy</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">opt</span> <span class="no">Extra</span> <span class="n">response</span>
</span><span class='line'>            <span class="no">Bob</span><span class="o">-&gt;&gt;</span><span class="ss">Alice</span><span class="p">:</span> <span class="no">Thanks</span> <span class="k">for</span> <span class="n">asking</span>
</span><span class='line'>        <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>这里是一个示例脚注<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 安装 &amp; 主题配置]]></title>
    <link href="http://aqia358.github.io/blog/2016/06/02/octopress-an-zhuang-and-zhu-ti-pei-zhi/"/>
    <updated>2016-06-02T09:39:15+08:00</updated>
    <id>http://aqia358.github.io/blog/2016/06/02/octopress-an-zhuang-and-zhu-ti-pei-zhi</id>
    <content type="html"><![CDATA[<h2>Octopress install</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundler install
</span><span class='line'>rake install #安装默认主题</span></code></pre></td></tr></table></div></figure>


<h4>部署到Github Pages</h4>

<hr />

<p>在Github上创建一个新的仓库，仓库名的格式应按照username.github.io。其中，username是你的Github的user name。</p>

<h4>配置octpress的git仓库地址</h4>

<p><code>rake setup_github_pages</code></p>

<h4>写blog</h4>

<p><code>rake new_post['blog title']</code>
这条rake命令会自动在source/_post/目录下生成一个以YYYY-MM-DD-title为格式，以.markdown为扩展名的文件。这个文件是使用Markdown进行编写，会被转换成静态HTML文件。</p>

<p>如果这篇文章没有完成，可以加一行published: false。在生成新内容，部署到远程时，这篇文章将不会被发表。</p>

<h4>发布blog</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate #根据source目录下的内容生成新的内容到_deploy目录下
</span><span class='line'>rake deploy #提交到远程的master分支下</span></code></pre></td></tr></table></div></figure>


<p>这时候已经可以通过username.github.io访问</p>

<h4>发布源码</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "source for blog page"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h2>配置Octopress</h2>

<p>目录下的_config.yml就是Octopress的主配置文件。这里包含Main Configs，Jekyll &amp; Plugins，3rd Party Settings三个模块。
Main Configs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>url: http://jeluomsy.github.io #这个由rake setup_github_pages时自动获取，不需要手动输入
</span><span class='line'>title: Jeluomsy's Blog
</span><span class='line'>subtitle: 记录学习生活的点滴收获
</span><span class='line'>author: Jeluomsy</span></code></pre></td></tr></table></div></figure>


<p>一般情况下，我们只需要修改title，subtitle，author。</p>

<h2>Jekyll &amp; Plugins</h2>

<p>这个模块中可以修改的设置比较多。</p>

<h4>文件目录配置，保持默认即可。</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root: /
</span><span class='line'>permalink: /blog/:year/:month/:day/:title/
</span><span class='line'>source: source
</span><span class='line'>destination: public
</span><span class='line'>plugins: plugins
</span><span class='line'>code_dir: downloads/code
</span><span class='line'>category_dir: blog/categories</span></code></pre></td></tr></table></div></figure>


<h4>文章在博客中如何展示的一些配置</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>paginate: 2          # 每一页显示的博文数量
</span><span class='line'>paginate_path: "posts/:num"  # 分页路径
</span><span class='line'>recent_posts: 10       # 侧边栏‘最近文章’中显示的博文数量
</span><span class='line'>excerpt_link: "Read on &rarr;"  # 类似于'阅读全文'按钮的功能
</span><span class='line'>excerpt_separator: "&lt;!--more--&gt;" # 文章只预显示这条语句之前的内容</span></code></pre></td></tr></table></div></figure>


<p>文章标题格式
<code>titlecase: false</code></p>

<p>如果为true，就会默认首字母大写以及改变一些特殊字符的显示。默认为true。</p>

<h4>侧边栏配置</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default_asides: [asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html, custom/asides/about.html]</span></code></pre></td></tr></table></div></figure>


<p>这里的路径是在source/_includes目录之下。用来显示在侧边栏显示那些内容，基本上是一些第三方社交网站。最后的about.html可以写一些个人介绍。</p>

<h4>3rd Party Settings</h4>

<p>这里可以配置Github的信息，评论系统disqus，以及Google Analytics。这三个是我认为有必要配置的部分。 Github只需要填上github_user:设置项。disqus和Google Analytics需要获取对应的disqus_short_name:和google_analytics_tracking_id:才可以使用。</p>

<p>评论系统可以使用国内的多说，访问速度更快。</p>

<p>统计可以使用国内的百度分析。</p>

<h4>更换主题</h4>

<p>Octopress的主题文件存放在source/.themes/隐藏目录下。在第一次成功执行rake install后，就会安装默认的主题。</p>

<p>如果希望更换主题，可以在Github上搜索关键字Octopress Theme。以我当前使用的主题Slash为例，按顺序执行以下命令。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
</span><span class='line'>$ rake install['slash']
</span><span class='line'>$ rake generate</span></code></pre></td></tr></table></div></figure>


<p>如果在执行rake install[&lsquo;slash&rsquo;]时，出现
<code>Build Warning: Layout 'nil' requested in atom.xml does not exist.</code></p>

<p>是因为无法识别nil这个值。</p>

<p>将source/atom.xml和source/_includes/custom/category_feed.xml两个文件中
<code>layout: nil</code></p>

<p>改为
<code>layout: null</code></p>

<h4>分类名称永远小写的解决方法</h4>

<p>在使用过程中最让我头疼的还是分类名称一直小写的问题。我把源代码中关于分类的部分都看了一遍，没有发现什么地方让分类名变成了小写。但是在网站上显示的时候却直接变成了小写。为了解决这个问题，我只能采取最笨的方法，直接修改source/_plugins目录下的categories_generate.rb插件，来控制分类名称的输出。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>case "#{category}"
</span><span class='line'>    when "ios"
</span><span class='line'>        self.data['title']       = "#{title_prefix}iOS"
</span><span class='line'>        self.data['description'] = "#{meta_description_prefix}iOS"
</span><span class='line'>    else
</span><span class='line'>        self.data['title']       = "#{title_prefix}#{category}"
</span><span class='line'>        self.data['description'] = "#{meta_description_prefix}#{category}"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>这个方法在每一次新增分类时都可能需要修改，添加新的when语句。</p>

<h2>Octopress themes</h2>

<table>
<thead>
<tr>
<th> Name  </th>
<th> URL   </th>
</tr>
</thead>
<tbody>
<tr>
<td> Octopress Flat </td>
<td> <a href="https://github.com/alexharris/octopress-flat/">https://github.com/alexharris/octopress-flat/</a> </td>
</tr>
<tr>
<td>   a   </td>
<td>   <a href="http://sofreshandsogreen.herokuapp.com/">http://sofreshandsogreen.herokuapp.com/</a> </td>
</tr>
<tr>
<td> Slash </td>
<td> <a href="https://tommy351.github.io/Octopress-Theme-Slash/index_tw.html">https://tommy351.github.io/Octopress-Theme-Slash/index_tw.html</a> </td>
</tr>
<tr>
<td> </td>
<td> <a href="http://jser.it/">http://jser.it/</a> </td>
</tr>
<tr>
<td> </td>
<td> <a href="https://syui.github.io/blog/archives/">https://syui.github.io/blog/archives/</a> </td>
</tr>
<tr>
<td> Oct2 </td>
<td> <a href="http://bijumon.github.io/oct2/">http://bijumon.github.io/oct2/</a> </td>
</tr>
<tr>
<td> Octoplate </td>
<td> <a href="https://github.com/mjhea0/noLogo#screenshots">https://github.com/mjhea0/noLogo#screenshots</a> </td>
</tr>
<tr>
<td> minimized </td>
<td> <a href="https://github.com/lmm/minimized#screenshots">https://github.com/lmm/minimized#screenshots</a> </td>
</tr>
<tr>
<td> </td>
<td> <a href="http://blog.justin.kelly.org.au/octopress-theme/">http://blog.justin.kelly.org.au/octopress-theme/</a> </td>
</tr>
<tr>
<td> </td>
<td> <a href="https://www.lijinma.com/blog/archives">https://www.lijinma.com/blog/archives</a> </td>
</tr>
<tr>
<td> Terminal </td>
<td> <a href="http://ivanjovanovic.com/">http://ivanjovanovic.com/</a> </td>
</tr>
<tr>
<td> </td>
<td> <a href="https://mmistakes.github.io/hpstr-jekyll-theme/theme-setup/">https://mmistakes.github.io/hpstr-jekyll-theme/theme-setup/</a> </td>
</tr>
<tr>
<td></td>
<td> <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a> </td>
</tr>
</tbody>
</table>


<h2>Haroopad</h2>

<p>跨平台，代码高亮，Vim 键绑定，多列模式，行号，折叠， Github Flavored Markdown 等功能~<br/>
Ubuntu14 从官网下载deb包双击安装</p>

<h2>Reference</h2>

<p><a href="http://jeluomsy.github.io/blog/2016/01/03/build-octopress-on-github-pages/">http://jeluomsy.github.io/blog/2016/01/03/build-octopress-on-github-pages/</a></p>
]]></content>
  </entry>
  
</feed>
